@startuml
participant Application
participant PlantUMLPreprocessor
participant markdown_plantuml_pipeline
participant CodeProcessor
participant Renderer
participant PlantUMLBackend

Application -> Application: main
	Application -> Application: handle_preprocessing
	Application -> PlantUMLPreprocessor: run
		PlantUMLPreprocessor -> Renderer: create renderer
		Renderer --> PlantUMLPreprocessor: renderer
		loop for each chapter
			PlantUMLPreprocessor -> markdown_plantuml_pipeline: render_plantuml_code_blocks(chapter markdown, renderer)
			markdown_plantuml_pipeline -> CodeProcessor: process
			loop for each PlantUML code block
				CodeProcessor -> Renderer: render
					Renderer -> PlantUMLBackend: render_from_string
				Renderer --> CodeProcessor: Markdown link to image
				CodeProcessor -> CodeProcessor: Replace PlantUML code block with link
			end				
			Renderer --> markdown_plantuml_pipeline: Patched chapter markdown
			markdown_plantuml_pipeline --> PlantUMLPreprocessor: Patched chapter markdown
			PlantUMLPreprocessor -> PlantUMLPreprocessor: Assign new chapter markdown
		end
@enduml